package com.shavarushka.commands.commandhandlers;

import java.util.Map;
import java.util.Set;

import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import com.shavarushka.commands.BotState;
import com.shavarushka.commands.MessageSender;
import com.shavarushka.commands.commandhandlers.interfaces.AbstractTextCommand;
import com.shavarushka.commands.keyboard.KeyboardsFabrics;
import com.shavarushka.database.SQLiteConnection;
import com.shavarushka.database.entities.ShoppingCarts;
import com.shavarushka.database.entities.Users;

public class InviteUserCommand extends AbstractTextCommand {
    public InviteUserCommand(MessageSender sender, Map<Long, BotState> userStates, SQLiteConnection connection) {
        super(sender, userStates, connection);
    }

    @Override
    public String getCommand() {
        return "/inviteuser";
    }

    @Override
    public String getDescription() {
        return "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ –≤ —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É";
    }

    @Override
    public void execute(Update update) throws TelegramApiException {
        Long chatId = update.getMessage().getChatId();
        Long userId = update.getMessage().getFrom().getId();
    
        if (!checkForUserExisting(chatId, userId) || !checkForCartExisting(chatId, userId))
            return;

        sender.sendMessage(chatId, 
                "–í–≤–µ–¥–∏ @–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É:",
                KeyboardsFabrics.createKeyboard(Map.of("/cancelinvitinguser", "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"), 
                1, InlineKeyboardMarkup.class), false);
        userStates.put(chatId, BotState.WAITING_FOR_USERNAME_TO_INVITE);
    }

    public class UsernameInputHandler extends AbstractTextCommand {
        public UsernameInputHandler(MessageSender sender, Map<Long, BotState> userStates, SQLiteConnection connection) {
            super(sender, userStates, connection);
        }

        @Override
        public String getCommand() {
            return "invite_username";
        }

        @Override
        public String getDescription() {
            return "";
        }
        
        @Override
        public boolean shouldProcess(Update update) {
            if (!update.hasMessage() || !update.getMessage().hasText())
                return false;

            Long chatId = update.getMessage().getChatId();
            return userStates.containsKey(chatId) &&
                   userStates.get(chatId).equals(BotState.WAITING_FOR_USERNAME_TO_INVITE);
        }

        @Override
        public void execute(Update update) throws TelegramApiException {
            Long chatId = update.getMessage().getChatId();
            Long currentUserId = update.getMessage().getFrom().getId();
            Long invitedCartId = connection.getUserById(currentUserId).selectedCartId();
            String usernameToInvite = update.getMessage().getText();
            String currentUsername = update.getMessage().getFrom().getUserName().isEmpty() ?
                                    update.getMessage().getFrom().getFirstName() :
                                    update.getMessage().getFrom().getUserName();
            String message;

            if (!isCorrectUsername(usernameToInvite)) {
                message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.";
                sender.sendMessage(chatId, message,
                    KeyboardsFabrics.createKeyboard(
                        Map.of("/cancelinvitinguser", "–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"),
                        1, InlineKeyboardMarkup.class), false);
                return;
            }

            if (isItMe(currentUsername, usernameToInvite.substring(1))) {
                message = "–•—É–ª–∏–≥–∞–Ω–∏—à—åüôÉ";
                sender.sendMessage(chatId, message, false);
                userStates.remove(chatId);
                return;
            }

            Users invitedUser = connection.getUserByUsername(usernameToInvite.substring(1));
            if (invitedUser == null) {
                message = "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–µ–π –±–∞–∑–µüòî –û—Ç–º–µ–Ω—è—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ...";
                sender.sendMessage(chatId, message, false);
                userStates.remove(chatId);
                return;
            }

            if (isUserAlreadyHaveThisCart(invitedUser.userId(), invitedCartId)) {
                message = usernameToInvite + " —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µüòã";
                sender.sendMessage(chatId, message, false);
                userStates.remove(chatId);
                return;
            }
            
            inviteUser(currentUsername, currentUserId, invitedUser.chatId(), invitedCartId);

            message = "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + usernameToInvite;
            sender.sendMessage(chatId, message, false);
            userStates.remove(chatId);
        }

        private boolean isCorrectUsername(String username) {
            return username.toLowerCase().matches("@[a-z0-9_]+");  
        }

        private boolean isItMe(String myUsername, String usernameToInvite) {
            return myUsername.equals(usernameToInvite);  
        }

        private boolean isUserAlreadyHaveThisCart(Long userId, Long cartId) {
            Set<ShoppingCarts> carts = connection.getCartsAssignedToUser(userId);
            for (ShoppingCarts cart : carts) {
                if (cart.cartId() == cartId) {
                    return true;
                }
            }
            return false;
        }

        private void inviteUser(String currentUsername, Long currentUserId, Long invitedChatId, Long invitedCartId) throws TelegramApiException {
            String invitedCart = connection.getCartById(invitedCartId).cartName();
            String invitingMessage = "@" + MessageSender.escapeMarkdownV2(currentUsername) +
                                    " –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É *" + MessageSender.escapeMarkdownV2(invitedCart) + "*";
            InlineKeyboardMarkup keyboard = KeyboardsFabrics.createKeyboard(
                                Map.of("/confirminviting_" + invitedCartId, "‚úÖ –í—Å—Ç—É–ø–∏—Ç—å"
                                    ), 1, InlineKeyboardMarkup.class);
            sender.sendMessage(invitedChatId, invitingMessage, keyboard, true);
        }
        
    }
}
